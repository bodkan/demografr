#!/usr/bin/env python3

# This script implements an example of an external command-line program which
# can be used by demografr to compute summary statistics from a non-tree-sequence
# data (in this example, a program which computes a pairwise nucleotide
# diversity between all samples in a VCF file).
#
# Please be aware that it's implemented in an extremely inefficient way to avoid
# any dependencies on third-party Python modules! It should never be used for
# inference in practice.

import argparse
import gzip
import sys
from collections import defaultdict
from itertools import combinations
from statistics import mean

parser = argparse.ArgumentParser()
parser.add_argument("--vcf", type=str, required=True)
parser.add_argument("--tsv", type=str, required=True)

args = parser.parse_args()
vcf_path = args.vcf
tsv_path = args.tsv

# scikit allel version of the nucleotide diversity computation
# (included here as a sanity check)
# import allel
# vcf = allel.read_vcf(vcf_path)
# 
# gt = allel.GenotypeArray(vcf["calldata/GT"]).to_haplotypes()
# pos = vcf["variants/POS"]
# ac = gt.count_alleles()
# pi = allel.sequence_diversity(pos, ac)
# pi

vcf = gzip.open(vcf_path, "rt")

# parse the VCF header to get the sample names
for line in vcf:
  if line.startswith("#CHROM"):
    header = line.strip().split("\t")
    sample_names = header[9:]
    break

chromosomes = [f'{sample}_chr{chr}' for chr in [1, 2] for sample in sample_names]

# iterate over each line, collecting alleles from each "phased" chromoosome
pos = []
genotypes = defaultdict(list)
for line in vcf:
    parts = line.strip().split("\t")

    # collect positions of each locus
    pos.append(int(parts[1]))

    # collect alleles for each chromosome at this locus
    gt_str = [p.split(':')[0] for p in parts[9:]]  # extract GT fields
    gt_pair = [g.split('|') for g in gt_str]  # split phased genotypes
    gt_list = [int(allele) for g in gt_pair for allele in g]
    
    for i, gt in enumerate(gt_list):
      genotypes[chromosomes[i]].append(gt)

if not pos:
  sys.exit("The VCF file does not contain any genotypes!")
  
# compute pairwise nucleotide diversity
pairs = list(combinations(chromosomes, 2))
all_diffs = []
for pair in pairs:
  pair_diffs = 0
  pair_genotypes1 = genotypes[pair[0]]
  pair_genotypes2 = genotypes[pair[1]]
  for locus1, locus2 in zip(pair_genotypes1, pair_genotypes2):
    pair_diffs += locus1 != locus2
  all_diffs.append(pair_diffs)

pi = mean(all_diffs) / (pos[-1] - pos[0] + 1)

# save the result to a TSV file
tsv = open(tsv_path, "w")
tsv.write("set\tdiversity\n")
tsv.write(f"pop\t{pi}\n")
tsv.close()
