# Workflow derived from https://github.com/r-lib/actions/tree/v2/examples
# Need help debugging build failures? Start at https://github.com/r-lib/actions#where-to-find-help
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

name: R-CMD-check

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: macOS-latest,   r: 'release'}
          - {os: windows-latest, r: 'release'}
          - {os: ubuntu-latest,  r: 'devel', http-user-agent: 'release'}
          - {os: ubuntu-latest,  r: 'release'}
          - {os: ubuntu-latest,  r: 'oldrel-1'}

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: yes

    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies on macOS
        if: runner.os == 'macOS'
        run: brew install gsl

      - name: Install dependencies on Linux
        if: runner.os == 'Linux'
        run: sudo apt-get install libgsl-dev libwebp-dev libx11-dev libcairo2-dev

      - name: Compile and install SLiM
        if: runner.os != 'Windows'
        run: |
          # download SLiM into a separate directory to avoid CRAN errors
          mkdir -p ~/deps
          cd ~/deps

          # installation instructions copied from the SLiM manual:
          wget http://benhaller.com/slim/SLiM.zip
          unzip SLiM.zip
          cd SLiM
          cmake .
          make slim

      - name: Populate PATH with compiled binaries
        if: runner.os != 'Windows'
        run: |
          export PATH="$HOME/deps/SLiM:$PATH"
          echo "PATH=$PATH" >> ~/.Renviron

      - uses: r-lib/actions/setup-pandoc@v2

      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}
          use-public-rspm: true

      - name: Install devtools-related dependencies on Linux
        if: runner.os == 'Linux'
        run: sudo apt-get install libcurl4-openssl-dev libharfbuzz-dev libfribidi-dev

      - name: Setup dedicated Python environment for slendr
        run: |
          install.packages("reticulate", repos = "http://cran.rstudio.com")
          reticulate::install_miniconda()
          deps <- c("msprime==1.3.3", "tskit==0.5.8", "pyslim==1.0.4")
          PYTHON_ENV <- paste0("Python-3.12_", paste(gsub("==", "-", c(deps, "tspop==0.0.2")), collapse = "_"))
          reticulate::conda_create(envname = PYTHON_ENV, python_version = '3.12')
          reticulate::use_condaenv(PYTHON_ENV, required = TRUE)
          reticulate::conda_install(envname = PYTHON_ENV, packages = c("msprime==1.3.1", "tskit==0.5.6"), pip = FALSE)
          reticulate::conda_install(envname = PYTHON_ENV, packages = c("tspop==0.0.2", "pyslim==1.0.4", "pyarrow"), pip = TRUE)
        shell: Rscript {0}

      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: any::rcmdcheck
          needs: check

      - name: Setup dedicated Python environment for slendr on Unix
        if: runner.os != 'Windows'
        run: |
          R -e 'slendr::setup_env(agree = TRUE)'
          R --no-echo -e 'reticulate::conda_binary()'
          R --no-echo -e 'reticulate::conda_list()'
          R --no-echo -e 'reticulate::py_config()'

      - name: Setup dedicated Python environment for slendr on Windows
        if: runner.os == 'Windows'
        run: |
          R -e 'slendr::setup_env(agree = TRUE)'
          R --no-echo -e 'reticulate::conda_binary()'
          R --no-echo -e 'reticulate::conda_list()'
          R --no-echo -e 'reticulate::py_config()'
        shell: bash

      - uses: r-lib/actions/check-r-package@v2
        with:
          upload-snapshots: true
